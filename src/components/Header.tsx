import { useState, useEffect, ChangeEvent } from "react";

import Head from "next/head";
import NextImage from "next/image";
import ColorThief from "colorthief";
import MyColorPicker from "@/components/CustomSquarePicker";

interface HeaderProps {
  onImageUpload: (imageCard: { url: string; palette: string[] }) => void;
}

export default function Header({ onImageUpload }: HeaderProps) {
  const [palette, setPalette] = useState<string[]>([]);
  const [imageCards, setImageCards] = useState<
    Array<{ url: string; palette: string[] }>
  >([]);

  const [previewImg, setPreviewImg] = useState<string | null>("/fox.png");

  const handleImageUpload = async (event: ChangeEvent<HTMLInputElement>) => {
    // console.log("Header handleImageUpload called");
    const file = event.target.files?.[0];
    if (file) {
      const previewUrl = URL.createObjectURL(file);
      setPreviewImg(previewUrl);

      const colorThief = new ColorThief();
      const img = new Image();
      img.src = previewUrl;
      img.onload = () => {
        const colorPalette = colorThief.getPalette(img, 5);
        setPalette(colorPalette.map((color) => `rgb(${color.join(",")})`));

        // Add the new image and its palette to the imageCards state
        setImageCards([
          ...imageCards,
          {
            url: previewUrl,
            palette: colorPalette.map((color) => `rgb(${color.join(",")})`),
          },
        ]);
      };
    }
  };

  // console.log("Updated imageCards:", imageCards);

  const copyToClipboard = async (hexColor: string) => {
    try {
      await navigator.clipboard.writeText(hexColor);
      console.log("Copied color:", hexColor);
    } catch (err) {
      console.error("Failed to copy color:", err);
    }
  };

  const handleColorPick = (color: any) => {
    copyToClipboard(color.hex);
  };

  useEffect(() => {
    const generateInitialPalette = async () => {
      const colorThief = new ColorThief();
      const img = new Image();
      img.src = "/fox.png";
      img.onload = () => {
        const colorPalette = colorThief.getPalette(img, 5);
        setPalette(colorPalette.map((color) => `rgb(${color.join(",")})`));
      };
    };

    generateInitialPalette();
  }, []);

  return (
    <>
      <Head>
        <title>Blendedshades</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/blendedshades-logo.svg" />
      </Head>

      <div className="container-header">
        <div className="hero-desc">
          <span className="header-1">
            Extract the best colors from your photos
          </span>
          <div className="header-2">
            Crave a color combo that syncs with your top pics?
            BlendedShades&apos; color scheme creator nails it in moments. Just
            add an image, and we&apos;ll craft your palette from its tones.
          </div>

          <button
            className="btn-upload"
            onClick={() => document.getElementById("upload-image")?.click()}
          >
            Upload Image
          </button>
          <input
            type="file"
            id="upload-image"
            accept="image/*"
            onChange={handleImageUpload}
            style={{ display: "none" }}
          />
        </div>
        <div className="container-image">
          <div className="picture-div">
            {previewImg && (
              <NextImage
                src={previewImg}
                alt="Preview"
                layout="fill"
                objectFit="cover"
              />
            )}
          </div>
          {palette.length > 0 && (
            <MyColorPicker colors={palette} onCustomChange={handleColorPick} />
          )}
        </div>
      </div>
    </>
  );
}
